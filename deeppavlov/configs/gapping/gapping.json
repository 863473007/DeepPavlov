{
  "dataset_reader": {
    "class_name": "gapping_dataset_reader",
    "data_path": [
      "/home/alexeysorokin/data/Other/AGRR-2019/train.csv",
      "/home/alexeysorokin/data/Other/AGRR-2019/dev.csv",
      "/home/alexeysorokin/data/Other/AGRR-2019/test.csv"
    ],
    "data_types": [
      "train", "valid", "test"
    ]
  },
  "dataset_iterator": {
    "class_name": "data_learning_iterator"
  },
  "chainer": {
    "in": ["x"],
    "in_y": ["y_labels", "y_data"],
    "pipe": [
      {
        "in": [
          "x"
        ],
        "class_name": "lazy_tokenizer",
        "out": [
          "x_words"
        ]
      },
      {
        "in": [
          "x", "x_words", "y_data"
        ],
        "class_name": "char_to_word_indexer",
        "out": [
          "y_word_data"
        ]
      },
      {
        "in": [
          "x_words"
        ],
        "class_name": "verb_selector",
        "out": [
          "x_verbs"
        ]
      },
      {
        "in": [
          "x_words", "y_word_data", "x_verbs"
        ],
        "class_name": "gapping_source_preprocesor",
        "out": [
          "y_verb_gap_matrix", "y_verb_gap_indexes"
        ]
      },
      {
        "class_name": "bert_ner_preprocessor",
        "vocab_file": "{BERT_PATH}/vocab.txt",
        "do_lower_case": false,
        "max_seq_length": 512,
        "max_subword_length": 15,
        "subword_mask_mode": "last",
        "token_masking_prob": 0.0,
        "in": ["x_words"],
        "out": ["x_tokens", "x_subword_tokens", "x_subword_tok_ids", "pred_subword_mask"]
      },
      {
        "class_name": "mask",
        "in": ["x_subword_tokens"],
        "out": ["x_subword_mask"]
      },
      {
        "id": "tag_vocab",
        "class_name": "simple_vocab",
        "min_freq": 3,
        "fit_on": [
          "y"
        ],
        "in": ["y"],
        "out": ["y_ind"],
        "special_tokens": [
          "PAD",
          "BEGIN",
          "END"
        ],
        "pad_with_zeros": true,
        "save_path": "{WORK_PATH}/tag.dict",
        "load_path": "{WORK_PATH}/tag.dict"
      },
      {
        "class_name": "bert_gapping_recoginizer",
        "keep_prob": 0.1,
        "bert_config_file": "{BERT_PATH}/bert_config.json",
        "pretrained_bert": "{BERT_PATH}/bert_model.ckpt",
        "attention_probs_keep_prob": 0.5,
        "return_probas": false,
        "encoder_layer_ids": [6, 7, 8, 9, 10, 11],
        "optimizer": "tf.train:AdamOptimizer",
        "learning_rate": 1e-3,
        "bert_learning_rate": 2e-5,
        "min_learning_rate": 1e-7,
        "learning_rate_drop_patience": 30,
        "learning_rate_drop_div": 1.5,
        "load_before_drop": true,
        "clip_norm": null,
        "save_path": "{WORK_PATH}/bert_gapping",
        "load_path": "{WORK_PATH}/bert_gapping",
        "in": ["x_subword_tok_ids", "x_subword_mask", "pred_subword_mask", "x_verbs"],
        "in_y": ["y_verb_gap_matrix"],
        "out": ["y_verb_gap_matrix_predicted"]
      }
    ],
    "out": [
      "y_verb_gap_matrix_predicted"
    ]
  },
  "train": {
    "epochs": 10,
    "batch_size": 8,
    "metrics": [
      {
        "name": "gapping_position_f1",
        "alias": "position f1",
        "inputs": [
          "y_verb_gap_matrix",
          "y_verb_gap_matrix_predicted"
        ]
      },
      {
        "name": "gapping_sentence_f1",
        "alias": "sentence f1",
        "inputs": [
          "y_verb_gap_matrix",
          "y_verb_gap_matrix_predicted"
        ]
      }
    ],
    "validation_patience": 10,
    "val_every_n_epochs": 1,
    "val_every_n_batches": 100,

    "tensorboard_log_dir": "{WORK_PATH}/logs",
    "show_examples": false,
    "pytest_max_batches": 2,
    "pytest_batch_size": 8,
    "evaluation_targets": ["valid", "test"],
    "class_name": "nn_trainer"
  },
  "metadata": {
    "variables": {
      "ROOT_PATH": "~/.deeppavlov",
      "DOWNLOADS_PATH": "{ROOT_PATH}/downloads",
      "MODELS_PATH": "{ROOT_PATH}/models",
      "BERT_PATH": "{DOWNLOADS_PATH}/bert_models/rubert_cased_L-12_H-768_A-12_v1",
      "WORK_PATH": "{MODELS_PATH}/gapping"
    },
    "requirements": [
      "{DEEPPAVLOV_PATH}/requirements/tf.txt",
      "{DEEPPAVLOV_PATH}/requirements/bert_dp.txt"
    ]
  }
}
